package main

import (
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestHealthcheckHandler(t *testing.T) {
	// Initialize an instance of config and application.
	cfg := config{
		env: "test",
	}
	app := &application{
		config: cfg,
	}

	// Initialize a new httptest.ResponseRecorder.
	rr := httptest.NewRecorder()

	// Initialize a new dummy http.Request.
	r, err := http.NewRequest("GET", "/v1/healthcheck", nil)
	if err != nil {
		t.Fatal(err)
	}

	app.healthcheckHandler(rr, r)

	// Call the Result() method on the http.ResponseRecorder to get the
	// http.Response generated by the healthcheckHandler.
	// rs := rr.Result()

	// We can then examine the http.Response to check that the status code
	// written by the healthcheckHandler was 200.
	// if rs.StatusCode != http.StatusOK {
	// 	t.Errorf("want %d; got %d", http.StatusOK, rs.StatusCode)
	// }
	if rr.Code != http.StatusOK {
		t.Errorf("want %d; got %d", http.StatusOK, rr.Code)
	}

	// And we can check that the response body written by the healthcheck
	// handler equals "OK".
	// defer rs.Body.Close()
	// body, err := ioutil.ReadAll(rs.Body)
	// if err != nil {
	// 	t.Fatal(err)
	// }
	// if string(body) != "OK" {
	// 	t.Errorf("want body to equal %q; got %q", "OK", string(body))
	// }

	// if rr.Body.String() != "OK" {
	// 	t.Errorf("expected body of %q but got %q", "OK", rr.Body.String())
	// }

	// JSON decoding
	var got envelope
	err = json.NewDecoder(rr.Body).Decode(&got)
	if err != nil {
		t.Fatalf("unable to parse response from server %q into envelope, '%v'", rr.Body, err)
	}
	env := got["system_info"].(map[string]interface{})["environment"]
	if env != "test" {
		t.Errorf("expected environment to equal %q but got %q", "test", env)
	}
}

/*
Run:

$ go test -v -run ^TestHealthcheckHandler$ github.com/cedrickchee/skel/cmd/api
*/
